<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQLMap on Tutorials</title>
    <link>http://localhost:35637/tutorials/docs/sqlmap/</link>
    <description>Recent content in SQLMap on Tutorials</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:35637/tutorials/docs/sqlmap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Introduction to Using sqlmap for SQL Injection Testing</title>
      <link>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/introduction_to_sqlmap.md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/introduction_to_sqlmap.md/</guid>
      <description>Introduction linkUsing sqlmap can be challenging if you&amp;rsquo;re unfamiliar with it. This tutorial aims to present the essential functionalities of this popular SQL injection tool in a quick and straightforward manner. Before using sqlmap, ensure you have the latest release and a Python interpreter installed. Most Linux distributions come with Python by default. If you&amp;rsquo;re not using Linux or don&amp;rsquo;t have Python installed, download and install it.&#xA;You&amp;rsquo;ll also need a vulnerable website to test.</description>
    </item>
    <item>
      <title>Comprehensive Guide to SQL Injection</title>
      <link>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/what_is_sql_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/what_is_sql_injection/</guid>
      <description>What is SQL Injection (SQLi)? linkSQL Injection (SQLi) is a web security vulnerability that allows an attacker to interfere with the queries an application makes to its database. This can enable an attacker to view or manipulate data that they normally cannot access. In severe cases, SQL injection can be used to compromise the underlying server or back-end infrastructure, leading to significant data breaches, reputational damage, and regulatory fines.&#xA;Impact of SQL Injection linkA successful SQL injection attack can lead to unauthorized access to sensitive data, such as:</description>
    </item>
    <item>
      <title>Database Fingerprinting for SQL Injection: Identifying the Underlying DBMS</title>
      <link>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/database_fingerprinting_for_sql_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/database_fingerprinting_for_sql_injection/</guid>
      <description>Database fingerprinting is a crucial step in SQL injection attacks. Identifying the underlying database management system (DBMS) allows attackers to fine-tune their injected segments and fully exploit vulnerabilities. This guide explores techniques for fingerprinting a database using SQL injection.&#xA;Error Messages linkOne of the simplest ways to fingerprint a database is through error messages. When a database error is generated, the error message often includes information about the DBMS.&#xA;Example:</description>
    </item>
    <item>
      <title>Estimating MySQL Table Size using SQL Injection</title>
      <link>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/estimating_mysql_database_size/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/estimating_mysql_database_size/</guid>
      <description>Estimating the size of a MySQL table using SQL injection can provide valuable information to an attacker. Knowing the approximate number of records in a table helps estimate the time required to extract all the data, which is crucial when dealing with slow or limited extraction techniques.&#xA;How It Works linkWhen a SELECT query is executed, the database engine evaluates all records returned by the statement to ensure they satisfy the WHERE clause.</description>
    </item>
    <item>
      <title>Time-Based Blind SQL Injection Attacks</title>
      <link>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/time_based_blind_attacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/time_based_blind_attacks/</guid>
      <description>Time-based blind SQL injection attacks are a form of SQL injection where the attacker injects a query that causes a time delay in the database response. By observing the time it takes for the server to respond, the attacker can infer information about the database, even if there is no direct feedback from the database server.&#xA;Purpose of Time-Based SQL Injection linkTime-based techniques are particularly useful for blind and deep blind SQL injection attacks where there is no other way to retrieve information from the database server.</description>
    </item>
    <item>
      <title>Time-Based Blind SQL Injection Using Heavy Queries</title>
      <link>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/time_based_blinds_using_heavy_queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:35637/tutorials/docs/sqlmap/sqlmap/time_based_blinds_using_heavy_queries/</guid>
      <description>Overview linkIn some cases, it might be impossible to use time delay functions or procedures for classic time delay injections. In such situations, the best alternative is to simulate a delay using heavy queries, which take a noticeable amount of time to execute. This technique leverages the execution time of complex queries to infer information about the database.&#xA;Principle linkThe injected query should rely on system tables, as the attacker usually has no information about user tables.</description>
    </item>
  </channel>
</rss>
